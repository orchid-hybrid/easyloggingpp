You can use many techniques to track time taken by a specific function to make sure your code is not taking very long to finish. You can use logger to log your time in each function. In this example, I am going to use EasyLogging++, [link]http://www.icplusplus.com/tools/easylogging/[/link] to goto the homepage and download the latest version.

Lets say we have a function called [italic]myFunction[/italic] and function takes 2 seconds to execute. [cpp_code_no_line]int result = myFunction("this is test");[/cpp_code] and it prints something like: [cpp_code_no_line][PERFORMANCE] Executed [int myFunction(string)] in [~0 seconds][/cpp_code] This just keeps track of how you going with your functions. To achieve this, EasyLogging++ 1.0 has a syntax for defining functions and sub-routines that look like [cpp_code_no_line]SUB(print,(const std::string& input))
   /* sub-routine body */
   std::cout << input;
END_SUB 

FUNC(int,sum,(int x,int y))
   /* function body */
   RETURN(x+y);
END_FUNC [/cpp_code] Use these functions normally [cpp_code_no_line]int main(void) {
    print("this is test");
    int sumResult = sum(1,2);
    std::cout << "Sum of 1 and 2 is " << sumResult;
}[/cpp_code] and output will look something like: (depending on your EasyLogging++ configuration) [cpp_code_no_line]this is test
[PERFORMANCE] Executed [void print(string)] in [~0 seconds]
[PERFORMANCE] Executed [int sum(int, int)] in [~0 seconds]
Sum of 1 and 2 is 3[/cpp_code]You may notice couple of things going on in above code, [italic]SUB[/italic] and [italic]FUNC[/italic]. The reason why they are different is because of returning type. Additionally, we have a macro [italic]RETURN[/italic]. We cannot simply use normal [italic]return[/italic] because otherwise function will return value before expanding [italic]END_FUNC[/italic] macro.

Note: Enable time tracking macros by setting [iblock]_ENABLE_PERFORMANCE_LOGS[/iblock] to 1 in [italic]easylogging++.h[/italic]
